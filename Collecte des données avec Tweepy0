from twitter_collect import twitter_connection_setup
import tweepy



#####CONNECTION A L API TWITTER

#We import our access keys:
from twitter_collect.credentials import *

def twitter_setup():
    """
    Utility function to setup the Twitter's API
    with an access keys provided in a file credentials.py
    :return: the authentified API
    """
    # Authentication and access using keys:
    auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)
    auth.set_access_token(ACCESS_TOKEN, ACCESS_SECRET)

    # Return API with authentication:
    api = tweepy.API(auth)
    return api





###GET A QUERY
def liste(row) :
    """
    Cette fonction prend en paramètre une liste et renvoie la liste de tous les keywords
    :param row: liste où les élements sont soit un seul keyword,
    soit plusieurs keywords séparés par une virgule
    :return: liste où chaque éléments correspond à un keyword
    """
    for i in range(0,len(row)) :
        if ',' in row[i]:
            row2=row[i].split(",")
            #row2 est une liste des mots-clefs qui sont sur une même ligne dans un fichier texte
            row+=row2
            del row[i]
            print(row)
    return(row)

def get_candidate_queries(file_path):
    """
    Generate and return a list of string queries for the search Twitter API from the file file_path_num_candidate.txt
    :param num_candidate: the number of the candidate
    :param file_path: the path to the keyword and hashtag files
    :param type: type of the keyword, either "keywords" or "hashtags"
    :return: (list) a list of string queries that can be done to the search API independently
    """
    try :
        with open(file_path,'r') as keyword_file :
            row=keyword_file.readlines()
            print(liste(row))
    except IOError:
        print("The file cannot be read")

get_candidate_queries(r'C:\Users\Gros\Desktop\testcodingweek.txt')



def get_tweets_from_candidates_search_queries(queries, twitter_api) :
#étant donnée une liste queries de requêtes (de type search) et une instance 
#de connexion twitter_api récupére et renvoie les tweets répondant aux différentes requêtes.
    try :
        for k in queries :
            print(collect(queries[k],twitter_api)
    except TweepError :
        print("Twitter detected an error")


###LANCER UNE COLLECTE

###API Search : Récupérer des tweets historiques (7jours précédents) à l'aide de mots clés

twitter_api=twitter_connection_setup.twitter_setup()

def collect(keyword,twitter_api):
    #twitter_api = twitter_connection_setup.twitter_setup()
    tweets = twitter_api.search(keyword,language="french",rpp=100)
    print(tweets)
    for tweet in tweets:
        print(tweet.text)



###API Users : récupérer des données sur les utilisateurs et notamment leurs tweets, leurs tweets re-tweetés...
def collect_by_user(user_id):
    connexion = twitter_connection_setup.twitter_setup()
    print(type(user_id))
    statuses = connexion.user_timeline(id = user_id, count = 200)
    for status in statuses:
        print(status.text)
    return statuses

collect_by_user(25073877)



### API Streaming et Filter : capter et filtrer un flux de tweets en temps réel

from tweepy.streaming import StreamListener
class StdOutListener(StreamListener):

    def on_data(self, data):
        print(data)
        return True

    def on_error(self, status):
        if  str(status) == "420":
            print(status)
            print("You exceed a limited number of attempts to connect to the streaming API")
            return False
        else:
            return True


def collect_by_streaming():
    connexion = twitter_connection_setup.twitter_setup()
    listener = StdOutListener()
    stream=tweepy.Stream(auth = connexion.auth, listener=listener)
    stream.filter(track=['Emmanuel Macron'])

collect_by_streaming()
